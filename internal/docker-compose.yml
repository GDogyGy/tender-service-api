version: '3.5'
volumes:
  db:
  db_test:

services:
  db:
    image: postgres:latest
    restart: always
    container_name: db
    environment:
      - POSTGRES_USER=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DATABASE}
      - DATABASE_HOST=${POSTGRES_HOST}
    ports:
      - '5432:5432'
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - backend
  app_test:
    container_name: app_test
    build:
      context: ../
      dockerfile: ./internal/docker/app-test/Dockerfile
    restart: always
    environment:
      - CONFIG_PATH=${CONFIG_PATH}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE}
      - POSTGRES_PASSWORD=123
      - POSTGRES_DB=TenderApi
      - POSTGRES_CONN=postgres://root:123@localhost:5434/TenderApi?sslmode=disable
      - POSTGRES_USER=root
      - POSTGRES_PORT=5434
    ports:
      - '${APP_TEST_PORT}:${APP_TEST_PORT}'
    depends_on:
      - db_test
  db_test:
    image: postgres:latest
    restart: always
    container_name: db_test
    environment:
      POSTGRES_DB: TenderApiTest
      POSTGRES_USER: root
      POSTGRES_PASSWORD: 123
      DATABASE_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: 5434
    ports:
      - '5434:5434'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-U", "root" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - db_test:/var/lib/postgresql/data
    depends_on:
      - db
networks:
  backend:
    driver: bridge

