// Code generated by mockery v2.49.1. DO NOT EDIT.

package fetch_test

import (
	model "TenderServiceApi/internal/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockuseCasesTenderFetch is an autogenerated mock type for the useCasesTenderFetch type
type MockuseCasesTenderFetch struct {
	mock.Mock
}

// FetchList provides a mock function with given fields: ctx, serviceType
func (_m *MockuseCasesTenderFetch) FetchList(ctx context.Context, serviceType string) ([]model.Tender, error) {
	ret := _m.Called(ctx, serviceType)

	if len(ret) == 0 {
		panic("no return value specified for FetchList")
	}

	var r0 []model.Tender
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]model.Tender, error)); ok {
		return rf(ctx, serviceType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.Tender); ok {
		r0 = rf(ctx, serviceType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Tender)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, serviceType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchListByUser provides a mock function with given fields: ctx, username
func (_m *MockuseCasesTenderFetch) FetchListByUser(ctx context.Context, username string) ([]model.Tender, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for FetchListByUser")
	}

	var r0 []model.Tender
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]model.Tender, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.Tender); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Tender)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchStatus provides a mock function with given fields: ctx, username, tenderId
func (_m *MockuseCasesTenderFetch) FetchStatus(ctx context.Context, username string, tenderId string) (model.Tender, error) {
	ret := _m.Called(ctx, username, tenderId)

	if len(ret) == 0 {
		panic("no return value specified for FetchStatus")
	}

	var r0 model.Tender
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (model.Tender, error)); ok {
		return rf(ctx, username, tenderId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) model.Tender); ok {
		r0 = rf(ctx, username, tenderId)
	} else {
		r0 = ret.Get(0).(model.Tender)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, tenderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockuseCasesTenderFetch creates a new instance of MockuseCasesTenderFetch. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockuseCasesTenderFetch(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockuseCasesTenderFetch {
	mock := &MockuseCasesTenderFetch{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
